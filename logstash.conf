filter {
    grok {
        match => [
        "message", "(?m)^\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{WORD:level}\s*\]\[%{PROG:logger}\s*\] %{GREEDYDATA:message}"
        ]
        overwrite => [ "message" ]
    }

    if [level] {
        grok {
            match => {
                # Note - this gc could have this appended: "duration \[%{NUMBER:gcTime:float}s\].*" but more work needs to be done to be able to work with ms, s, m, h, ...
                "message" => [
                    "(?m)^\[%{PROG:node}\] \[gc\]\[%{WORD:gcType}\]\[%{INT:gcFrom:int}\]\[%{INT:gcTo:int}\]",
                    "(?m)^\[%{PROG:node}\] \[%{PROG:index}\]\[%{INT:shard:int}\], node\[%{WORD:nodeID}\], \[%{WORD:shard_type}\], s\[%{WORD:state}\]\: %{GREEDYDATA:message}",
                    "(?m)^\[%{PROG:node}\] \[%{PROG:index}\]\[%{INT:shard:int}\] %{GREEDYDATA:message}",
                    "(?m)^\[%{PROG:node}\] \[%{PROG:index}\] %{GREEDYDATA:message}",
                    "(?m)^\[%{PROG:node}\] %{GREEDYDATA:message}"
                ]
            }
            overwrite => [ "message" ]
        }
    }

    if [logger] == "snapshots" {
        grok {
            match => [ "message", "snapshot \[%{PROG:snapshot}\] " ]
        }
    }

    date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
        remove_field => [ "timestamp" ]
    }
}
